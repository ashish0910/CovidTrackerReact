{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","center","zoom","countries","casesType","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCounry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","key","random","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b6ff9f1b.chunk.js","sourcesContent":["import React from 'react'\nimport {Card,CardContent,Typography} from '@material-ui/core'\nimport './InfoBox.css'\n\nexport default function InfoBox({ title , cases , total , active , isRed , ...props}) {\n    return (\n        <Card onClick={props.onClick}  className={`infoBox ${active && \"infoBox--selected\"} ${\n            isRed && \"infoBox--red\"\n          }`}>\n            <CardContent>\n                <Typography className=\"infoBox__cases\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n                <Typography color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n","import React from 'react';\nimport numeral from 'numeral';\nimport {Circle , Popup} from 'react-leaflet';\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      rgb: \"rgb(204, 16, 52)\",\n      half_op: \"rgba(204, 16, 52, 0.5)\",\n      multiplier: 800,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      rgb: \"rgb(125, 215, 29)\",\n      half_op: \"rgba(125, 215, 29, 0.5)\",\n      multiplier: 1200,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      rgb: \"rgb(251, 68, 67)\",\n      half_op: \"rgba(251, 68, 67, 0.5)\",\n      multiplier: 2000,\n    },\n  };\n  \n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    sortedData.sort((a,b) => {\n        return b.cases - a.cases;\n    });\n    return sortedData;\n}\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n\n  export const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React from 'react';\nimport {Map as LeafletMap , TileLayer} from 'react-leaflet';\nimport './Map.css'\nimport {showDataOnMap} from './util';\n\nfunction Map({center , zoom , countries , casesType = 'cases'}) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n            <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            {showDataOnMap(countries,casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react';\nimport './Table.css';\nimport numeral from 'numeral';\n\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country,cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format()}</strong></td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport {FormControl , MenuItem , Select , Card , CardContent } from '@material-ui/core'\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport {sortData} from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css'\nimport {prettyPrintStat} from './util';\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCounry] = useState('worldwide');\n  const [countryInfo,setCountryInfo] = useState({});\n  const [tableData,setTableData] = useState([]);\n  const[mapCenter,setMapCenter] = useState({lat: 28.7041,lng: 77.1025});\n  const[mapZoom,setZoom] = useState(3);\n  const[mapCountries,setMapCountries] = useState([]);\n  const[casesType,setCasesType] = useState('cases');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/all')\n      .then(data => data.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n    }\n    fetchData();\n  },[]);\n\n  useEffect(() => {\n    const getCountriesData = async () => fetch('https://disease.sh/v3/covid-19/countries')\n    .then((response) => response.json())\n    .then((data) => {\n      const countries = data.map((country) => ({\n        name: country.country,\n        value: country.countryInfo.iso2\n      }));\n      const sortedData = sortData(data); \n      setTableData(sortedData);\n      setMapCountries(data);\n      setCountries(countries);\n    })\n    getCountriesData();\n  },[]);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n    .then(data => data.json())\n    .then(data => {\n      setCounry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter({'lat': data.countryInfo.lat,'lng': data.countryInfo.long});\n      setZoom(5);\n    })\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem> \n              { countries.map( (country) =>  <MenuItem key={Math.random()} value={country.value}>{country.name}</MenuItem>  ) }\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__infoboxes\">\n          <InfoBox isRed={true} active={casesType === \"cases\"} onClick={(e) => setCasesType('cases')} title=\"Corona cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={countryInfo.cases}></InfoBox>\n          <InfoBox isRed={false} active={casesType === \"recovered\"}  onClick={(e) => setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={countryInfo.recovered}></InfoBox>\n          <InfoBox isRed={true} active={casesType === \"deaths\"}  onClick={(e) => setCasesType('deaths')} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={countryInfo.deaths}></InfoBox>\n        </div>\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases By Country</h3>\n          <Table countries={tableData}></Table>\n          <h3>World wide new {casesType}</h3>\n          <LineGraph casesType={casesType}></LineGraph>\n        </CardContent>\n        \n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}